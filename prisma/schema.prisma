generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id           String @id @default(cuid())
  shortName    String @unique
  longName     String
  points       Int    @default(0)
  played       Int    @default(0)
  won          Int    @default(0)
  lost         Int    @default(0)
  draw         Int    @default(0)
  forRuns      Int    @default(0)
  forOvers     Float  @default(0)
  againstRuns  Int    @default(0)
  againstOvers Float  @default(0)
  nrr          Float  @default(0)

  team1       Match[]        @relation("team1")
  team2       Match[]        @relation("team2")
  batFirst    Match[]        @relation("batFirst")
  winner      Match[]        @relation("winner")
  predictions Prediction[]
  user        UserProfile[]
  t1History   MatchHistory[] @relation("team1History")
  t2History   MatchHistory[] @relation("team2History")
  winHistory  MatchHistory[] @relation("winnerHistory")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      Password?
  image         String?
  role          UserRole  @default(USER)
  balance       Float     @default(0)
  doublesLeft   Int       @default(5)

  accounts    Account[]
  sessions    Session[]
  predictions Prediction[]
  profile     UserProfile?
}

model Password {
  hash String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
}

model UserProfile {
  firstName String?
  lastName  String?
  isPaid    Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  @@id([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MatchType {
  LEAGUE
  ELIMINATOR
  QUALIFIER1
  QUALIFIER2
  FINAL
}

enum MatchStatus {
  SCHEDULED
  COMPLETED
  ABANDONED
}

enum PredictionStatus {
  PLACED
  DEFAULT
  WON
  LOST
  NORESULT
}

model Match {
  id           String      @id @default(cuid())
  num          Int         @unique
  date         String
  type         MatchType   @default(LEAGUE)
  status       MatchStatus @default(SCHEDULED)
  venue        String?
  doublePlayed Boolean     @default(false)
  minStake     Int         @default(50)
  team1Runs    Int         @default(0)
  team2Runs    Int         @default(0)
  team1Wickets Int         @default(0)
  team2Wickets Int         @default(0)
  team1Overs   Float       @default(0)
  team2Overs   Float       @default(0)
  result       String?

  team1Id String?
  team1   Team?   @relation("team1", fields: [team1Id], references: [id], onDelete: Cascade)

  team2Id String?
  team2   Team?   @relation("team2", fields: [team2Id], references: [id], onDelete: Cascade)

  batFirstId String?
  batFirst   Team?   @relation("batFirst", fields: [batFirstId], references: [id], onDelete: Cascade)

  winnerId String?
  winner   Team?   @relation("winner", fields: [winnerId], references: [id], onDelete: Cascade)

  predictions Prediction[]
}

model Prediction {
  id        String           @id @default(cuid())
  amount    Int
  result    Float            @default(0)
  status    PredictionStatus @default(PLACED)
  isDouble  Boolean          @default(false)
  isUpdated Boolean          @default(false)

  matchId String?
  match   Match?  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([matchId, userId])
}

model MatchHistory {
  id     String      @id @default(cuid())
  date   String?
  status MatchStatus @default(COMPLETED)
  venue  String?
  result String?

  team1Id String?
  team1   Team?   @relation("team1History", fields: [team1Id], references: [id], onDelete: Cascade)

  team2Id String?
  team2   Team?   @relation("team2History", fields: [team2Id], references: [id], onDelete: Cascade)

  winnerId String?
  winner   Team?   @relation("winnerHistory", fields: [winnerId], references: [id], onDelete: Cascade)
}
